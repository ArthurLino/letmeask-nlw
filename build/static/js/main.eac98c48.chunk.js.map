{"version":3,"sources":["assets/images/logo.svg","assets/images/google-icon.svg","components/Button/index.tsx","assets/images/illustration.svg","components/AuthAside/index.tsx","services/firebase.ts","contexts/AuthContext.tsx","hooks/useAuth.ts","pages/Home.tsx","pages/NewRoom.tsx","assets/images/copy.svg","components/RoomCode/index.tsx","assets/images/empty-questions.svg","components/EmptyQuestions/index.tsx","components/Question/index.tsx","hooks/useRoom.ts","pages/Room.tsx","assets/images/answer.svg","assets/images/check.svg","assets/images/delete.svg","pages/AdminRoom.tsx","App.tsx","index.tsx"],"names":["Button","isOutlined","props","className","AuthAside","src","illustrationImage","alt","firebase","initializeApp","apiKey","process","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","auth","database","AuthContext","createContext","AuthContextProvider","useState","user","setUser","a","provider","GoogleAuthProvider","signInWithPopup","result","displayName","photoURL","uid","Error","id","name","avatar","useEffect","unSubscribe","onAuthStateChanged","Provider","value","signInWithGoogle","children","useAuth","useContext","Home","history","useHistory","roomCode","setRoomCode","push","event","preventDefault","trim","ref","get","roomRef","exists","alert","val","endedAt","logoImage","onClick","googleIconImage","onSubmit","type","placeholder","onChange","target","NewRoom","newRoom","setNewRoom","roomReference","title","authorId","firebaseRoom","key","to","RoomCode","navigator","clipboard","writeText","code","copyImage","EmptyQuestions","emptyQuestionsImage","userIsLoggedIn","Question","content","author","isAnswered","isHighlighted","classNames","answeredQuestion","highlightedQuestion","useRoom","roomId","questions","setQuestions","setTitle","on","room","databaseRoom","firebaseQuestions","questionsArray","Object","entries","map","likeCount","values","likes","length","likeId","find","off","Room","useParams","newQuestion","setNewQuestion","question","questionId","remove","disabled","aria-label","handleLikeQuestion","width","height","viewBox","fill","xmlns","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","AdminRoom","update","Date","window","confirm","handleCheckQuestionAsAnswered","checkedImage","handleHighlightQuestion","answeredImage","handleDeleteQuestion","deleteImage","App","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.eac98c48.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.e4553917.svg\";","export default __webpack_public_path__ + \"static/media/google-icon.df15d8e5.svg\";","import { ButtonHTMLAttributes } from \"react\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype ButtonProps = ButtonHTMLAttributes<HTMLButtonElement> & {\r\n  isOutlined?: boolean;\r\n};\r\n\r\nexport function Button({isOutlined = false, ...props}: ButtonProps) {\r\n  return (\r\n    <button \r\n      className={`btn ${isOutlined && 'outlined'}` } {...props} \r\n    />\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/illustration.ae7276f0.svg\";","import illustrationImage from \"../../assets/images/illustration.svg\";\r\n\r\nimport \"./styles.scss\"\r\n\r\nexport function AuthAside() {\r\n  return (\r\n    <aside>\r\n      <img src={illustrationImage} alt=\"questions and answers screen illustration\" />\r\n      <strong>Crie salas de Q&amp;A ao-vivo</strong>\r\n      <p>Tire as dúvidas da sua audiência em tempo-real</p>\r\n    </aside>\r\n  );\r\n}","import firebase from 'firebase/app';\r\n\r\nimport 'firebase/auth';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n  apiKey: process.env.REACT_APP_API_KEY,\r\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\r\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\r\n  projectId: process.env.REACT_APP_PROJECT_ID,\r\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\r\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID,\r\n  appId: process.env.REACT_APP_APP_ID\r\n};\r\n\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nconst auth = firebase.auth();\r\nconst database = firebase.database();\r\n\r\nexport { firebase, auth, database };","import { createContext, ReactNode, useEffect, useState } from \"react\";\r\n\r\nimport firebase from \"firebase\";\r\nimport { auth } from \"../services/firebase\";\r\n\r\ntype User = {\r\n  id: string;\r\n  name: string;\r\n  avatar: string;\r\n}\r\n\r\ntype AuthContextType = {\r\n  user: User | undefined;\r\n  signInWithGoogle: () => Promise<void>;\r\n}\r\n\r\ntype AuthContextProviderProps = {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthContext = createContext( {} as AuthContextType );\r\n\r\nexport function AuthContextProvider(props: AuthContextProviderProps) {\r\n\r\n  const [ user, setUser ] = useState<User>();\r\n\r\n  useEffect(() => {\r\n    const unSubscribe = auth.onAuthStateChanged(user => {\r\n      if ( user ) {\r\n        const { displayName, photoURL, uid } = user;\r\n\r\n        if ( !displayName || !photoURL ) {\r\n          throw new Error('Missing Information from Google Account');\r\n        }\r\n\r\n        setUser({\r\n          id: uid,\r\n          name: displayName,\r\n          avatar: photoURL,\r\n        });\r\n      } \r\n    });\r\n\r\n    return () => {\r\n      unSubscribe();\r\n    }\r\n  }, []);\r\n\r\n  async function signInWithGoogle() {\r\n    const provider = new firebase.auth.GoogleAuthProvider();\r\n\r\n    const result = await auth.signInWithPopup(provider);\r\n    \r\n    if ( result.user ) {\r\n      const { displayName, photoURL, uid } = result.user;\r\n\r\n      if ( !displayName || !photoURL ) {\r\n        throw new Error('Missing Information from Google Account');\r\n      }\r\n\r\n      setUser({\r\n        id: uid,\r\n        name: displayName,\r\n        avatar: photoURL,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, signInWithGoogle }}>\r\n      {props.children}\r\n    </AuthContext.Provider>\r\n  );\r\n}","import { useContext } from \"react\";\r\nimport { AuthContext } from \"../contexts/AuthContext\";\r\n\r\nexport function useAuth() {\r\n  const value = useContext(AuthContext);\r\n  return value;\r\n}","import { useHistory } from 'react-router-dom';\r\n\r\nimport { FormEvent, useState } from 'react';\r\n\r\nimport logoImage from '../assets/images/logo.svg';\r\nimport googleIconImage from '../assets/images/google-icon.svg'\r\n\r\nimport '../styles/auth.scss'\r\n\r\nimport { Button } from '../components/Button/index';\r\nimport { AuthAside } from '../components/AuthAside/index';\r\n\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\nimport { database } from '../services/firebase';\r\n\r\nexport function Home() {\r\n\r\n  const history = useHistory();\r\n\r\n  const { user, signInWithGoogle } = useAuth();\r\n  const [roomCode, setRoomCode] = useState('');\r\n\r\n  async function handleCreateRoom() {\r\n\r\n    if (!user) {\r\n      await signInWithGoogle();\r\n    }\r\n\r\n    history.push('/rooms/new');\r\n  }\r\n\r\n  async function handleJoinRoom(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if (roomCode.trim() === \"\") {\r\n      return;\r\n    }\r\n\r\n    const roomRef = await database.ref(`rooms/${roomCode}`).get();\r\n\r\n    if (!roomRef.exists()) {\r\n      alert('Room does not exists.');\r\n      return;\r\n    }\r\n\r\n    if (roomRef.val().endedAt) {\r\n      alert('Room already closed.');\r\n      return;\r\n    }\r\n\r\n    history.push(`/rooms/${roomCode}`);\r\n  }\r\n\r\n  return (\r\n    <section id=\"auth-page\">\r\n      <AuthAside />\r\n      <main>\r\n        <div className=\"main-content\">\r\n          <img src={logoImage} alt=\"Letmeask logo\" />\r\n          <button className=\"btn-google\" onClick={handleCreateRoom}>\r\n            <img src={googleIconImage} alt=\"Google logo\" />\r\n            Criar sala usando uma conta Google\r\n          </button>\r\n          <div className=\"separator\">Ou entre em uma sala</div>\r\n          <form onSubmit={handleJoinRoom}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Digite o código da sala\"\r\n              onChange={event => setRoomCode(event.target.value)}\r\n              value={roomCode}\r\n            />\r\n            <Button type=\"submit\">\r\n              Entrar\r\n            </Button>\r\n          </form>\r\n        </div>\r\n      </main>\r\n    </section>\r\n  );\r\n}","import { Link, useHistory } from 'react-router-dom';\r\n\r\nimport { FormEvent, useState } from 'react';\r\n\r\nimport logoImage from '../assets/images/logo.svg';\r\n\r\nimport '../styles/auth.scss'\r\n\r\nimport { Button } from '../components/Button';\r\nimport { AuthAside } from '../components/AuthAside';\r\n\r\nimport { useAuth } from '../hooks/useAuth';\r\n\r\nimport { database } from '../services/firebase';\r\n\r\nexport function NewRoom() {\r\n\r\n  const { user } = useAuth();\r\n\r\n  const [newRoom, setNewRoom] = useState('');\r\n\r\n  const history = useHistory();\r\n\r\n  async function handleCreateRoom(event: FormEvent) {\r\n\r\n    event.preventDefault();\r\n\r\n    if (newRoom.trim() === \"\") {\r\n      return;\r\n    }\r\n\r\n    const roomReference = database.ref('rooms');\r\n\r\n    const firebaseRoom = await roomReference.push({\r\n      title: newRoom.trim(),\r\n      authorId: user?.id,\r\n    });\r\n\r\n    history.push(`/rooms/${firebaseRoom.key}`);\r\n  }\r\n\r\n  return (\r\n    <section id=\"auth-page\">\r\n      <AuthAside />\r\n      <main>\r\n        <div className=\"main-content\">\r\n          <img src={logoImage} alt=\"Letmeask logo\" />\r\n          <h2>Crie uma nova sala, {user ? user.name : ''}.</h2>\r\n          <form onSubmit={handleCreateRoom}>\r\n            <input\r\n              type=\"text\"\r\n              placeholder=\"Nome da sala\"\r\n              onChange={event => setNewRoom(event.target.value)}\r\n              value={newRoom}\r\n            />\r\n            <Button type=\"submit\">\r\n              Criar sala\r\n            </Button>\r\n          </form>\r\n          <p>Quer entrar em uma sala existente?\r\n            <br />\r\n            <Link to=\"/\">Clique aqui</Link>\r\n          </p>\r\n        </div>\r\n      </main>\r\n    </section>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/copy.2f36f99e.svg\";","import copyImage from \"../../assets/images/copy.svg\";\r\n\r\nimport \"./styles.scss\"\r\n\r\ntype RoomCodeProps = {\r\n  code: string;\r\n}\r\n\r\nexport function RoomCode(props: RoomCodeProps) {\r\n\r\n  function copyRoomCodeToClipboard() {\r\n\r\n    navigator.clipboard.writeText(props.code);\r\n\r\n  }\r\n\r\n  return (\r\n    <button className=\"room-code\">\r\n      <div onClick={copyRoomCodeToClipboard}>\r\n        <img src={copyImage} alt=\"Copy room code\" />\r\n      </div>\r\n\r\n      <span> {props.code} </span>\r\n    </button>\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/empty-questions.fcfd578c.svg\";","import emptyQuestionsImage from \"../../assets/images/empty-questions.svg\";\r\n\r\nimport \"./styles.scss\"\r\n\r\ntype EmptyQuestionsProps = {\r\n  userIsLoggedIn: boolean\r\n}\r\n\r\nexport function EmptyQuestions(props: EmptyQuestionsProps) {\r\n  return (\r\n\r\n    <div className=\"empty-messages\">\r\n\r\n      <img src={emptyQuestionsImage} alt=\"Não há nenhuma pergunta\" />\r\n      <h4>Nenhuma pergunta por aqui...</h4>\r\n\r\n      { props.userIsLoggedIn ?\r\n\r\n        (<p>Seja o primeiro a perguntar.</p>) :\r\n        (<p>Faça Login e seja o primeiro a perguntar.</p>)  \r\n      \r\n      }   \r\n\r\n    </div>\r\n\r\n  );\r\n}","import { ReactNode } from \"react\";\r\n\r\nimport classNames from \"classnames\";\r\n\r\nimport \"./styles.scss\";\r\n\r\ntype QuestionProps = {\r\n  content: string,\r\n  author: {\r\n    name: string,\r\n    avatar: string,\r\n  }\r\n  children?: ReactNode,\r\n  isAnswered?: boolean,\r\n  isHighlighted?: boolean,\r\n}\r\n\r\nexport function Question({ \r\n  content, \r\n  author, \r\n  children, \r\n  isAnswered = false,\r\n  isHighlighted = false,\r\n}: QuestionProps) {\r\n  return (\r\n    <div \r\n      className={classNames(\r\n        'question',\r\n        {answeredQuestion: isAnswered},\r\n        {highlightedQuestion: isHighlighted && !isAnswered},\r\n      )}\r\n    >\r\n      <p>{content}</p>\r\n      <footer>\r\n        <div className=\"user-info\">\r\n          <img src={author.avatar} alt={author.name} />\r\n          <span>{author.name}</span>\r\n        </div>\r\n        <div>\r\n          {\r\n            children\r\n          }          \r\n        </div>\r\n      </footer>\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from \"react\";\r\n\r\nimport { database } from \"../services/firebase\";\r\n\r\nimport { useAuth } from \"./useAuth\";\r\n\r\ntype FirebaseQuestions = Record<string, {\r\n  author: {\r\n    name: string,\r\n    avatar: string,\r\n  }\r\n  content: string,\r\n  isHighlighted: boolean,\r\n  isAnswered: boolean,\r\n  likes: Record<string, {authorId: string}>,\r\n}>\r\n\r\ntype Questions = {\r\n  id: string,\r\n  author: {\r\n    name: string,\r\n    avatar: string,\r\n  }\r\n  content: string,\r\n  isHighlighted: boolean,\r\n  isAnswered: boolean,\r\n  likeCount: number,\r\n  likeId: string | undefined,\r\n}\r\n\r\nexport function useRoom(roomId: string) {\r\n  const [questions, setQuestions] = useState<Questions[]>([]);\r\n  const [title, setTitle] = useState('');\r\n\r\n  const { user } = useAuth();\r\n  \r\n  useEffect(() => {\r\n    const roomRef = database.ref(`rooms/${roomId}`);\r\n\r\n    roomRef.on('value', room => {\r\n\r\n      const databaseRoom = room.val();\r\n      const firebaseQuestions: FirebaseQuestions = databaseRoom.questions ?? {};\r\n\r\n      const questionsArray = Object.entries(firebaseQuestions).map(([key, value]) => {\r\n        return {\r\n          id: key,\r\n          content: value.content,\r\n          author: value.author,\r\n          isHighlighted: value.isHighlighted,\r\n          isAnswered: value.isAnswered,\r\n          likeCount: Object.values(value.likes?? {}).length,\r\n          likeId: Object.entries(value.likes ?? {}).find(([key, like]) => like.authorId === user?.id)?.[0],\r\n        };\r\n      });\r\n\r\n      setTitle(databaseRoom.title);\r\n      setQuestions(questionsArray);\r\n\r\n    })\r\n\r\n    return () => { \r\n      roomRef.off('value');\r\n    }\r\n\r\n  }, [roomId, user?.id]);\r\n\r\n  return { questions, title }\r\n\r\n}","import { FormEvent, useState } from 'react';\r\nimport { useParams } from 'react-router-dom';\r\n\r\nimport logoImage from '../assets/images/logo.svg';\r\n\r\nimport { Button } from '../components/Button/index';\r\nimport { RoomCode } from '../components/RoomCode/index';\r\nimport { EmptyQuestions } from '../components/EmptyQuestions/index';\r\nimport { Question } from '../components/Question/index';\r\n\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useRoom } from '../hooks/useRoom';\r\n\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss';\r\n\r\ntype RoomParams = {\r\n  id: string;\r\n}\r\n\r\nexport function Room() {\r\n\r\n  const params = useParams<RoomParams>();\r\n  const roomId = params.id;\r\n\r\n  const { user } = useAuth();\r\n\r\n  const [newQuestion, setNewQuestion] = useState('');\r\n\r\n  const { questions, title } = useRoom( roomId )\r\n\r\n  async function handleSendQuestion(event: FormEvent) {\r\n    event.preventDefault();\r\n\r\n    if (newQuestion.trim() === '') {\r\n      return;\r\n    }\r\n\r\n    if (!user) {\r\n      throw new Error('You must be logged in');\r\n    }\r\n\r\n    const question = {\r\n      content: newQuestion,\r\n      author: {\r\n        name: user.name,\r\n        avatar: user.avatar,\r\n      },\r\n      isHighlighted: false,\r\n      isAnswered: false,\r\n    };\r\n\r\n    await database.ref(`rooms/${roomId}/questions`).push(question);\r\n\r\n    setNewQuestion('');\r\n  }\r\n\r\n  async function handleLikeQuestion(questionId: string, likeId: string | undefined) {\r\n    if ( likeId ) {\r\n      await database.ref(\r\n        `rooms/${roomId}/questions/${questionId}/likes/${likeId}`\r\n      ).remove();\r\n    }\r\n    else {\r\n      await database.ref(\r\n        `rooms/${roomId}/questions/${questionId}/likes`\r\n      ).push({\r\n        authorId: user?.id,\r\n      });\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section id=\"room-page\">\r\n\r\n      <header>\r\n\r\n        <div className=\"content\">\r\n\r\n          <img src={logoImage} alt=\"Letmeask logo\" />\r\n\r\n          <RoomCode code={roomId} />\r\n\r\n        </div>\r\n\r\n      </header>\r\n\r\n      <main>\r\n\r\n        <div className=\"room-title\">\r\n\r\n          <h1>Sala: {title}</h1>\r\n          {\r\n            questions.length > 0 && <span>{questions.length} pergunta(s)</span>\r\n          }\r\n\r\n        </div>\r\n\r\n        <form onSubmit={handleSendQuestion}>\r\n\r\n          <textarea\r\n            placeholder=\"Qual é a sua pergunta?\"\r\n            onChange={event => setNewQuestion(event.target.value)}\r\n            value={newQuestion}\r\n          />\r\n\r\n          <div className=\"form-footer\">\r\n\r\n            {user ? (\r\n\r\n              <div className=\"user-info\">\r\n                <img src={user.avatar} alt={user.name} />\r\n                <span>{user.name}</span>\r\n              </div>\r\n\r\n            ) : (\r\n\r\n              <span> Para enviar uma pergunta, <button>faça seu login</button>.</span>\r\n\r\n            )\r\n            }\r\n\r\n            <Button type=\"submit\" disabled={!user}> Enviar pergunta </Button>\r\n\r\n          </div>\r\n\r\n        </form>\r\n\r\n      </main>\r\n\r\n      <section className=\"questions-display\">\r\n\r\n        {\r\n\r\n          questions.length > 0 ? (\r\n\r\n          questions.map(question => {\r\n            return (\r\n              <Question \r\n                key={question.id}\r\n                content={question.content}\r\n                author={question.author}\r\n                isHighlighted={question.isHighlighted}\r\n                isAnswered={question.isAnswered}\r\n              >\r\n\r\n              { !question.isAnswered &&\r\n\r\n                <button\r\n                  className={`like-btn ${question.likeId && 'liked'}`} \r\n                  type=\"button\" \r\n                  aria-label=\"Marcar como gostei\"\r\n                  onClick={() => handleLikeQuestion(question.id, question.likeId)}\r\n                >\r\n                  { question.likeCount > 0 && <span>{question.likeCount}</span> }\r\n                  <svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" xmlns=\"http://www.w3.org/2000/svg\">\r\n                    <path d=\"M7 22H4C3.46957 22 2.96086 21.7893 2.58579 21.4142C2.21071 21.0391 2 20.5304 2 20V13C2 12.4696 2.21071 11.9609 2.58579 11.5858C2.96086 11.2107 3.46957 11 4 11H7M14 9V5C14 4.20435 13.6839 3.44129 13.1213 2.87868C12.5587 2.31607 11.7956 2 11 2L7 11V22H18.28C18.7623 22.0055 19.2304 21.8364 19.5979 21.524C19.9654 21.2116 20.2077 20.7769 20.28 20.3L21.66 11.3C21.7035 11.0134 21.6842 10.7207 21.6033 10.4423C21.5225 10.1638 21.3821 9.90629 21.1919 9.68751C21.0016 9.46873 20.7661 9.29393 20.5016 9.17522C20.2371 9.0565 19.9499 8.99672 19.66 9H14Z\" stroke=\"#737380\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\"/>\r\n                  </svg>\r\n                </button>\r\n              \r\n              }\r\n\r\n              </Question>\r\n            );\r\n          })\r\n\r\n          ):(\r\n            <EmptyQuestions userIsLoggedIn={user? true: false}/>\r\n          )\r\n        }\r\n\r\n      </section>\r\n\r\n    </section >\r\n  );\r\n}","export default __webpack_public_path__ + \"static/media/answer.4502a8d5.svg\";","export default __webpack_public_path__ + \"static/media/check.5dfa6ed6.svg\";","export default __webpack_public_path__ + \"static/media/delete.22ba6e00.svg\";","import { FormEvent, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\n\r\nimport logoImage from '../assets/images/logo.svg';\r\nimport answeredImage from '../assets/images/answer.svg';\r\nimport checkedImage from '../assets/images/check.svg';\r\nimport deleteImage from '../assets/images/delete.svg';\r\n\r\nimport { Button } from '../components/Button/index';\r\nimport { RoomCode } from '../components/RoomCode/index';\r\nimport { Question } from '../components/Question/index';\r\n\r\nimport { useAuth } from '../hooks/useAuth';\r\nimport { useRoom } from '../hooks/useRoom';\r\n\r\nimport { database } from '../services/firebase';\r\n\r\nimport '../styles/room.scss';\r\n\r\ntype RoomParams = {\r\n  id: string;\r\n}\r\n\r\nexport function AdminRoom() {\r\n\r\n  const history = useHistory();\r\n\r\n  const params = useParams<RoomParams>();\r\n  const roomId = params.id;\r\n\r\n  // const { user } = useAuth();\r\n\r\n  const { questions, title } = useRoom( roomId )\r\n\r\n  async function handleEndRoom() {\r\n    await database.ref(`rooms/${roomId}`).update({ \r\n      endedAt: new Date(),\r\n    })\r\n\r\n    history.push('/');\r\n  }\r\n\r\n  async function handleDeleteQuestion(questionId: string) {\r\n    if ( window.confirm(\"Tem certeza que deseja excluir essa pergunta?\") ) {\r\n      const questionRef = await database.ref(`rooms/${roomId}/questions/${questionId}`).remove();\r\n    }\r\n  }\r\n\r\n  async function handleCheckQuestionAsAnswered(questionId: string) {\r\n    const questionRef = await database.ref(`rooms/${roomId}/questions/${questionId}`).update(\r\n      { isAnswered: true }\r\n    );\r\n  }\r\n\r\n  async function handleHighlightQuestion(questionId: string) {\r\n    const questionRef = await database.ref(`rooms/${roomId}/questions/${questionId}`).update(\r\n      { isHighlighted: true }\r\n    );\r\n  }\r\n\r\n  return (\r\n    <section id=\"room-page\">\r\n\r\n      <header>\r\n\r\n        <div className=\"content\">\r\n\r\n          <img src={logoImage} alt=\"Letmeask logo\" />\r\n\r\n          <div>\r\n\r\n          <RoomCode code={roomId} />      \r\n\r\n          <Button \r\n            isOutlined\r\n            onClick={handleEndRoom}\r\n          >\r\n            Encerrar Sala\r\n          </Button>\r\n\r\n          </div>\r\n\r\n        </div>\r\n\r\n      </header>\r\n\r\n      <main>\r\n\r\n        <div className=\"room-title\">\r\n\r\n          <h1>Sala {title}</h1>\r\n          {\r\n            questions.length > 0 && <span>{questions.length} pergunta(s)</span>\r\n          }\r\n\r\n        </div>\r\n\r\n      </main>\r\n\r\n      <section className=\"questions-display\">\r\n\r\n        {\r\n\r\n          questions.map(question => {\r\n            return (\r\n              <Question \r\n                key={question.id}\r\n                content={question.content}\r\n                author={question.author}\r\n                isHighlighted={question.isHighlighted}\r\n                isAnswered={question.isAnswered}\r\n              >\r\n                \r\n                <div className=\"question-buttons\">\r\n\r\n                  { !question.isAnswered && (\r\n\r\n                    <>\r\n                      <button\r\n                      type=\"button\"\r\n                      onClick={() => handleCheckQuestionAsAnswered(question.id)}\r\n                      >\r\n                      <img src={checkedImage} alt=\"Maracar pergunta como respondida\" />\r\n                      </button>\r\n                      <button\r\n                      type=\"button\"\r\n                      onClick={() => handleHighlightQuestion(question.id)}\r\n                      >\r\n                      <img src={answeredImage} alt=\"Dar destaque à pergunta\" />\r\n                      </button>\r\n                    </>\r\n                  \r\n                  )}\r\n                  \r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => handleDeleteQuestion(question.id)}\r\n                  >\r\n                    <img src={deleteImage} alt=\"Remover pergunta\" />\r\n                  </button>\r\n                </div>\r\n\r\n              </Question>\r\n            );\r\n          })\r\n\r\n        }\r\n\r\n      </section>\r\n\r\n    </section >\r\n  );\r\n}","import { Home } from \"./pages/Home\";\nimport { NewRoom } from \"./pages/NewRoom\";\nimport { Room } from \"./pages/Room\";\nimport { AdminRoom } from \"./pages/AdminRoom\";\n\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\n\nimport './styles/auth.scss'\n\nimport { AuthContextProvider } from \"./contexts/AuthContext\";\n\nfunction App() {\n\n  return (\n    <BrowserRouter>\n\n      <AuthContextProvider>\n\n        <Switch>\n\n          <Route path=\"/\" exact component={Home} />\n          <Route path=\"/rooms/new\" component={NewRoom} />\n          <Route path=\"/rooms/:id\" component={Room} />\n          <Route path=\"/admin/rooms/:id\" component={AdminRoom} />\n\n        </Switch>\n\n      </AuthContextProvider>\n\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport './services/firebase';\n\nimport './styles/global.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}